version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.1

commands:
  # Exercise - Rollback
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"

            aws cloudformation delete-stack \
              --stack-name udapeople-backend-<<parameters.workflow_id>>
            
            aws cloudformation delete-stack \ 
                --stack-name udapeople-frontend-<<parameters.workflow_id>>


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
          type: string      

    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              # Example: kvdb.io
              SUCCESS=$(curl --insecure  https://kvdb.io/UsRzqEWgTbVnHQKj5nCuvx/migration_<< parameters.workflow_id >>)
              
              # Logic for reverting the database state
              
              if (( $SUCCESS == 1 ));
              then
                  cd ~/project/backend
                  npm install
                  npm run migration:revert
              fi  

  
            
jobs:
  build-frontend:
    # Select a Docker image that is compatible with NodeJS
    docker:
      - image: circleci/node:13.8.0

    # Add code to build/compile the front-end.
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    # Select a Docker image that is compatible with NodeJS
    docker:
      - image: circleci/node:13.8.0

    # Add code to build/compile the front-end.
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    # Select a Docker image that is compatible with NodeJS
    docker:
          - image: circleci/node:13.8.0

    # Write code to run the unit tests
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run: 
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test


  test-backend:
    # Select a Docker image that is compatible with NodeJS
    docker:
          - image: circleci/node:13.8.0

    # Write code to run the unit tests
    steps:
          - checkout
          - restore_cache:
              keys: [backend-test]
          - run: 
              name: Test Back-end
              command: |
                cd backend
                npm install
                npm run test
          - save_cache:
              paths: [backend/node_modules]
              key: backend-test


  scan-frontend:
      # Select a Docker image that is compatible with NodeJS
      docker:
        - image: circleci/node:13.8.0

      # Add code to scan the front-end.
      steps:
        - checkout
        - restore_cache:
            keys: [scan-frontend]
        - run:
            name: Frontend scan
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical


  scan-backend:
      # Select a Docker image that is compatible with NodeJS
    docker:
      - image: circleci/node:13.8.0

    # Add code to scan the back-end.
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical


  deploy-infrastructure:
    # Select a Docker image that supports the AWS CLI, such as amazon/aws-cli.
    docker:
      - image: amazon/aws-cli

    steps:
        # Checkout code from git, and install tar and gzip
      - checkout
      - run:
          name: Install tar and gzip
          command: |
              yum install -y tar gzip

        # Ensure backend infrastructure exist
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

        # Ensure frontend infrastructure exist
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"


        # Add the EC2 instance IP to the Ansible inventory
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt

              cat ~/project/.circleci/ansible/inventory.txt


          # persist the modified inventory file to the workspace 
          # so that we can use that file in the future jobs.
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/*


          # Destroy-environment on fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  configure-infrastructure:
    # Select a Docker image that supports Ansible
    docker:
          - image: python:3.7-alpine3.11

    steps:
      # Checkout code from git.
      - checkout

        # Add the SSH key fingerprint to job so that Ansible will 
        # have access to the EC2 instance via SSH.
      - add_ssh_keys:
          fingerprints: ["c4:11:3c:85:fc:fa:08:be:f0:98:9e:ab:f9:29:74:87"]

        # Attach the "workspace" to the job so that you have access 
        # to all the files you need 
      - attach_workspace:
          at: ~/

        # Install dependencies for the next step, such as tar, gzip, ansible, or awscli.
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            pip install awscli


        # Configure server: finish the Ansible playbook .circleci/ansible/configure-server.yml 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

          # Destroy-environment on fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  run-migrations:
    # Select a Docker image that's compatible with NodeJS.
    docker:
          - image: circleci/node:13.8.0

    # Checkout code from git and restore the backend cache.
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      # Run migrations
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

            cat migrations_dump.txt

      # Send migration
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/UsRzqEWgTbVnHQKj5nCuvx/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi

        # destory env
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          

  deploy-frontend:
    # Select a Docker image that can handle the AWS CLI.
    docker:
      - image: python:3.7-alpine3.11

      # checkout
      - checkout

      # Attach the workspace from the earlier job.
      - attach_workspace:
          at: ~/

      # Install dependencies: such as Python, Ansible, Node, NPM, and AWS CLI.
      # Prefer to do these installations in multiple steps so that you will know 
      # where exactly the error occurs, if any.
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update --no-cache tar gzip nodejs npm curl

      # Get backend url:
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env

            cat frontend/.env

      # Deploy frontend objects:
      - run:
          name: Deploy frontend objects
          # Copy the files to your new S3 Bucket using AWS CLI (compiled 
          # front-end files can be found in a folder called ./dist

          command: |
            cd frontend
            npm install
            npm run build

            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Destroy the environment and revert the migration on fail.
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  deploy-backend:
    # Select a Docker image that is compatible with Ansible.
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      # Add the SSH key fingerprints to the job.
      - add_ssh_keys:
          fingerprints: ["c4:11:3c:85:fc:fa:08:be:f0:98:9e:ab:f9:29:74:87"]

      # Attach the "workspace" so that you have access to the 
      # previously generated inventory.txt from the deploy-infrastructure job.
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
            apk add --update --no-cache tar gzip nodejs npm curl

        # Ansible Playbook: Finish the .circleci/ansible/deploy-backend.yml 
        # and .circleci/ansible/roles/deploy/tasks/main.yml files.
        # Deploy backend
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..

            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"

            cat inventory.txt
            
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Destroy the environment and revert the migration on fail.
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  smoke-test:
    # Select a lightweight Docker image like one of the Alpine images.
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout

      # Install dependencies like curl, nodejs, npm, or awscli.
      - run:
          name: Install dependencies
          command: |
          apk add --update ansible
          pip install awscli
          apk add --update --no-cache tar gzip nodejs npm curl

        # Backend smoke test:
        # Retrieve the back-end IP address that you saved in an earlier job.
        # Use curl to hit the back-end API's status endpoint
      - run:
          name: Backend smoke test.
          command: |
          export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=instance-state-name,Values=running" \
            --output text)


          export API_URL="http://${BACKEND_IP}:3030"
          echo $API_URL

          if curl "${API_URL}/api/status" | grep "ok"
          then
            return 0
          else
            return 1
          fi

        # Check the front-end to make sure it includes a word or two that proves it is working properly.
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}

            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

    

workflows:
  project_three_default:
    jobs:
      - build-frontend
      - build-backend

      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]

      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]

      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]

      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]

      - smoke-test:
          requires: [deploy-backend, deploy-frontend]