# https://medium.com/geekculture/custom-slack-notification-with-circleci-workflow-9f42d9b767d2

# https://aws.amazon.com/getting-started/hands-on/create-connect-postgresql-db/

# https://github.com/CircleCI-Public/slack-orb/wiki/Setup

# https://migrant-group.slack.com/archives/C0155UA7V5K

version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.1

commands:
  # Exercise - Rollback
  notify_slack_error:
    steps:
      - slack/notify:
          mentions: "@hugb"
          event: fail
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          mentions: "@hugb"
          event: pass
          template: basic_success_1


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy environment ${CIRCLE_WORKFLOW_ID:0:7} 
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"

            aws s3 rm s3://udapeoplefrontend<< parameters.workflow_id >> --recursive

            aws cloudformation delete-stack \
              --stack-name udapeople-backend--${CIRCLE_WORKFLOW_ID:0:7}"
            
            aws cloudformation delete-stack \ 
                --stack-name udapeople-frontend--${CIRCLE_WORKFLOW_ID:0:7}"


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
          type: string      

    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              # Example: kvdb.io
              export SUCCESS=$(curl --insecure  https://kvdb.io/4SFMfEj1yh9KVfPZgQqj3q/migration_<< parameters.workflow_id >>)
              echo $SUCCESS

              # Logic for reverting the database state
              
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi  

  
            
jobs:
  # 1. Build Phase
  build-frontend:
    # Select a Docker image that is compatible with NodeJS
    docker:
      - image: circleci/node:13.8.0

    # Add code to build/compile the front-end.
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

      - notify_slack_error
      - notify_slack_pass


  build-backend:
    # Select a Docker image that is compatible with NodeJS
    docker:
      - image: circleci/node:13.8.0

    # Add code to build/compile the front-end.
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - notify_slack_error
      - notify_slack_pass


  # 2. Test Phase
  test-frontend:
    # Select a Docker image that is compatible with NodeJS
    docker:
          - image: circleci/node:13.8.0

    # Write code to run the unit tests
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run: 
          name: Test Front-end
          command: |
            cd frontend
            npm install
            npm run test

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test


  test-backend:
    # Select a Docker image that is compatible with NodeJS
    docker:
          - image: circleci/node:13.8.0

    # Write code to run the unit tests
    steps:
          - checkout
          - restore_cache:
              keys: [backend-test]
          - run: 
              name: Test Back-end
              command: |
                cd backend
                npm install
                npm run test

          - save_cache:
              paths: [backend/node_modules]
              key: backend-test


  # 3. Analyze Phase
  scan-frontend:
      # Select a Docker image that is compatible with NodeJS
      docker:
        - image: circleci/node:13.8.0

      # Add code to scan the front-end.
      steps:
        - checkout
        - restore_cache:
            keys: [scan-frontend]
        - run:
            name: Frontend scan
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical


  scan-backend:
      # Select a Docker image that is compatible with NodeJS
    docker:
      - image: circleci/node:13.8.0

    # Add code to scan the back-end.
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical


  # 4. Alerts

  # 1. Infrastructure Phase
  # 1.a. Create the Infrastructure
  deploy-infrastructure:
    # Select a Docker image that supports the AWS CLI, such as amazon/aws-cli.
    docker:
      - image: amazon/aws-cli

    steps:
        # Checkout code from git, and install tar and gzip
      - checkout
      # - run: yum install -y tar gzip
      - run:
          name: Install tar and gzip
          command: |
              yum install -y tar gzip

        # Ensure backend infrastructure exist
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

        # Ensure frontend infrastructure exist
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}


        # Add the EC2 instance IP to the Ansible inventory
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt

              cat ~/project/.circleci/ansible/inventory.txt


          # persist the modified inventory file to the workspace 
          # so that we can use that file in the future jobs.
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/*

          # Destroy-environment on fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  # 1.b. Configure Infrastructure
  configure-infrastructure:
    # Select a Docker image that supports Ansible
    docker:
          - image: python:3.7-alpine3.11

    steps:
      # Checkout code from git.
      - checkout

        # Add the SSH key fingerprint to job so that Ansible will 
        # have access to the EC2 instance via SSH.
      - add_ssh_keys:
          fingerprints: ["c4:11:3c:85:fc:fa:08:be:f0:98:9e:ab:f9:29:74:87"]

        # Attach the "workspace" to the job so that you have access 
        # to all the files you need 
      - attach_workspace:
          at: ~/

        # Install dependencies for the next step, such as tar, gzip, ansible, or awscli.
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            pip install awscli

        # Configure server: finish the Ansible playbook .circleci/ansible/configure-server.yml 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

            cat ~/project/.circleci/ansible/inventory.txt

          # Destroy-environment on fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  # 2. Deploy Phase
  # 2.a. Database Migrations
  run-migrations:
    # Select a Docker image that's compatible with NodeJS.
    docker:
          - image: circleci/node:13.8.0

    # Checkout code from git and restore the backend cache.
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
          

      # Run migrations
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
             # Run and save the migration output
            npm run migrations > migrations_dump.txt

            cat migrations_dump.txt

      # Send migration
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              
              then
                  sudo apt-get update && sudo apt-get install -y ca-certificates
                  
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/4SFMfEj1yh9KVfPZgQqj3q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi

        # destory env
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

          
  # 2.b. Deploy Frontend
  deploy-frontend:
    # Select a Docker image that can handle the AWS CLI.
    docker:
      - image: python:3.7-alpine3.11

    steps:
      # checkout
      - checkout

      # Attach the workspace from the earlier job.
      - attach_workspace:
          at: ~/

      # Install dependencies: such as Python, Ansible, Node, NPM, and AWS CLI.
      # Prefer to do these installations in multiple steps so that you will know 
      # where exactly the error occurs, if any.
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl
            pip install awscli

      # Get backend url:
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env

            cat frontend/.env

      # Deploy frontend objects:
      - run:
          # Copy the files to your new S3 Bucket using AWS CLI (compiled 
          # front-end files can be found in a folder called ./dist
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build

            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Destroy the environment and revert the migration on fail.
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     


  # 2.c. Deploy Backend
  deploy-backend:
    # Select a Docker image that is compatible with Ansible.
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout

      # Add the SSH key fingerprints to the job.
      - add_ssh_keys:
          fingerprints: ["c4:11:3c:85:fc:fa:08:be:f0:98:9e:ab:f9:29:74:87"]

      # Attach the "workspace" so that you have access to the 
      # previously generated inventory.txt from the deploy-infrastructure job.
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update --no-cache tar gzip nodejs npm curl
            pip install awscli

        # Ansible Playbook: Finish the .circleci/ansible/deploy-backend.yml 
        # and .circleci/ansible/roles/deploy/tasks/main.yml files.
        # Deploy backend
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..

            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible

            echo "Contents  of the inventory.txt file is -------"

            cat inventory.txt
            
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Destroy the environment and revert the migration on fail.
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  # 3. Smoke Test Phase
  smoke-test:
    # Select a lightweight Docker image like one of the Alpine images.
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - attach_workspace:
          at: ~/

      # Install dependencies like curl, nodejs, npm, or awscli.
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm curl
            pip install awscli

        # Backend smoke test:
        # Retrieve the back-end IP address that you saved in an earlier job.
        # Use curl to hit the back-end API's status endpoint
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL

            if curl "${API_URL}/api/status" | grep "ok"

            then
              return 0
            else
              return 1
            fi

        # Check the front-end to make sure it includes a word or two that proves it is working properly.
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}

            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


  # 4. Rollback Phase:  destroy-environment, revert-migrations

  # 5. Promotion Phase:
  cloudfront-update:
    # Select a docker image that is compatible with AWS CLI.
    docker:
      # - image: amazon/aws-cli
      - image: python:3.7-alpine3.11

    # Create code that promotes our new front-end to production.
    steps:
      - checkout
      - attach_workspace:
          at: ~/

      # Install any needed dependencies
      # apk goes with python?
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm curl
            pip install awscli

        # Use a CloudFormation template to change the origin of your 
        # CloudFront distribution to the new S3 bucket.
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "InitialStack" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

            echo OldWorkflowID: "${WorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  


    # 6. Cleanup Phase:  you will write code that deletes the 
    # previous S3 bucket and EC2 instance.
  cleanup:
    docker:
      - image: amazon/aws-cli
        
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/

      - run:
          name: Get old stack workflow id and delete
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 

            # echo Stack names: "${STACKS[@]}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}"]]

            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "${OldWorkflowID}" 

            then
              echo "-----------------Delete Confirmed----------------"
              # change ds:
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              # to:
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              
              aws cloudformation delete-stack --stack-name "udapeople-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-${OldWorkflowID}"
            else
              echo "----------------No need to clean up-----------------"
            fi

      - notify_slack_error
      - notify_slack_pass
  

workflows:
  project_three_default:
    jobs:
      # - build-frontend
      # - build-backend

      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]

      # - scan-frontend:
      #     requires: [test-frontend]
      # - scan-backend:
      #     requires: [test-backend]

      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]

      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]

      # - run-migrations:
      #     requires: [configure-infrastructure]

      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]

      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]

      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

      - cleanup


# db
# name, pass: postgres

# initial cfront:
# https://dnk5hfvznglyf.cloudfront.net

# new cfront:

